#!/usr/bin/env node

const fs = require("fs");
const { program, Option } = require("commander");
const path = require("path");
const chalk = require("chalk");
const pxtorem = require("../app");
const ora = require("ora");

const spinner = ora({
    text: chalk.yellow("Converting css px to rem..."),
    color: "yellow",
});

const processDir = process.cwd();

program
    .addOption(
        new Option("-init,--init [type]", "Init pxtorem options json").preset(
            "pxtorem.config.json"
        )
    )
    .addOption(
        new Option("-s, --size [type]", "Select html size")
            .preset("16")
            .default("16")
    )
    .addOption(
        new Option("-d, --dir [type...]", "Select css directory")
            .preset("/")
            .default(["/"])
    )
    .addOption(
        new Option("-t, --type [type]", "Select css ext type example: .scss")
            .preset(".css")
            .default(".css")
    )
    .addOption(
        new Option("-i, --ignore [type...]", "Ignore css attribute")
            .preset([])
            .default([])
    )
    .addOption(
        new Option("-r, --replace [type]", "For replace file name")
            .preset(false)
            .default(false)
    )
    .addOption(
        new Option("-o, --output [type]", "Output directory")
            .preset("")
            .default("")
    )
    .addOption(
        new Option("-in, --include [type...]", "For include css file path")
            .preset([])
            .default([])
    )
    .addOption(
        new Option("-ex, --exclude [type...]", "For exclue css file path")
            .preset([])
            .default([])
    )
    .addOption(
        new Option("-c, --config [type]", "For json config file")
            .preset("")
            .default("")
    )
    .parse();

let options = program.opts();

if (options.init) {
    initFunction(options.init);
}
spinner.start();

let configObj;
const currentDir = fs.readdirSync(processDir);

if (options.config && options.config.endsWith(".json")) {
    if (currentDir.indexOf(options.config) !== -1) {
        configObj = readConfigFile(options.config);
    }
} else {
    if (currentDir.indexOf("pxtorem.json") !== -1) {
        configObj = readConfigFile("pxtorem.json");
    }
    if (currentDir.indexOf("pxtorem.config.json") !== -1) {
        configObj = readConfigFile("pxtorem.config.json");
    }
}

function readConfigFile(fileName) {
    try {
        const configFilePath = path.join(processDir, fileName);
        const configfile = fs.readFileSync(configFilePath, "utf-8");
        const toObj = JSON.parse(`${configfile}`);
        if (typeof toObj === "object") {
            return toObj;
        } else {
            return false;
        }
    } catch (error) {
        return false;
    }
}

for (let key in options) {
    if (configObj && configObj.hasOwnProperty(key)) {
        const element = options[key];
        if (Array.isArray(element)) {
            let concatArr = element.concat(configObj[key]);
            let finalArr = [];
            concatArr.forEach((v) => {
                if (finalArr.length === 0) {
                    finalArr.push(v);
                } else if (finalArr.indexOf(v) === -1) {
                    finalArr.push(v);
                }
            });
            options[key] = finalArr;
        } else {
            options[key] = configObj[key];
        }
    }
}

if (options.replace) {
    const isMatch = options.replace.match(/.*\/name\/.*\/.ext/g);

    if (!isMatch) {
        spinner.fail(chalk.red("Replace name incorrect please fix this"));
        process.exit(1);
    }
}

options.dir.forEach((v) => {
    const dirPath = path.join(processDir, v);
    if (!fs.existsSync(dirPath)) {
        spinner.fail(chalk.red("Css directories not exist!"));
        process.exit(1);
    }
});

if (options.include.length > 0) {
    options.include.forEach((v) => checkFileExist(v, "Include"));
    options.include = options.include.map((v) => path.resolve(v));
}
if (options.exclude.length > 0) {
    options.exclude.forEach((v) => checkFileExist(v, "Exclude"));
    options.exclude = options.exclude.map((v) => path.resolve(v));
}

function checkFileExist(filePath, type) {
    filePath = path.join(processDir, filePath);
    if (!fs.existsSync(filePath)) {
        console.log(chalk.red(`${type} css file not exist`));
        process.exit(1);
    }
}

function checkOutputDir(dir) {
    if (!fs.existsSync(path.join(processDir, dir))) {
        console.log(chalk.red(`Output directory not exist`));
        process.exit(1);
    }
}

if (options.output) {
    checkOutputDir(options.output);
    options.output = path.resolve(options.output);
}

if (options.size && isNaN(options.size)) {
    console.log(chalk.red(`Html size not valid`));
    process.exit(1);
}

function initFunction(name) {
    const initData = `{
        "size": "16",
        "dir": ["public/css"],
        "type": ".css",
        "ignore": ["margin", "padding", "box-shadow"],
        "replace": "{your custom word}/name/{your custom word}/.ext",
        "output": "",
        "include": [],
        "exclude": []
    }`;
    const filePath = path.join(processDir, name);
    fs.writeFileSync(filePath, initData, { encoding: "utf-8", flag: "w" });
    spinner.succeed(chalk.green(`${name} created!`));
    process.exit(1);
}

pxtorem(options, spinner);

spinner.succeed(chalk.green("Convert completed. Enjoy (:"));
